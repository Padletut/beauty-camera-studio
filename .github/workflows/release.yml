name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-linux-with-docker:
    name: Linux(With Dockerfile) 
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t gpupixel_img .
 
      - name: Build with Linux script
        run: |
          mkdir -p build output && 
          docker run --rm \
            -u $(id -u):$(id -g) \
            -v $(pwd)/output:/workspace/output \
            -v $(pwd)/build:/workspace/build \
            -v $(pwd)/script:/workspace/script \
            -v $(pwd):/workspace \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/group:/etc/group:ro \
            gpupixel_img

      - name: Create zip
        working-directory: output
        run: zip -r gpupixel_linux_x86_64.zip . && ls

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpupixel_linux_x86_64
          path: output/gpupixel_linux_x86_64.zip

  build-macos-clang:
    name: macOS (Universal)
    runs-on: macos-latest
    timeout-minutes: 15
    env:
      BUILD_TYPE: Release
      CMAKE_OSX_ARCHITECTURES: x86_64;arm64
    steps:
      - uses: actions/checkout@v4

      # Grant script execution permissions
      - name: Grant execute permission for scripts
        run: chmod +x ${{github.workspace}}/script/*.sh
        
      # Use macOS build script
      - name: Build with macOS script
        run: ${{github.workspace}}/script/build_macos.sh

      - name: Create zip
        working-directory: ${{github.workspace}}/output
        run: zip -r gpupixel_mac_Universal.zip .

      - name: Upload Mac Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpupixel_mac_Universal
          path: ${{github.workspace}}/output/gpupixel_mac_Universal.zip
 

  build-ios-clang:
    name: iOS (Arm64)
    runs-on: macos-latest
    timeout-minutes: 15
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4

      # Grant script execution permissions
      - name: Grant execute permission for scripts
        run: chmod +x ${{github.workspace}}/script/*.sh
        
      # Use iOS build script
      - name: Build with iOS script
        run: ${{github.workspace}}/script/build_ios.sh

      - name: Create zip
        working-directory: ${{github.workspace}}/output
        run: zip -r gpupixel_ios_arm64.zip .

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpupixel_ios_arm64
          path: ${{github.workspace}}/output/gpupixel_ios_arm64.zip
 

  build-windows-cl:
    name: Windows (MSCV CL.EXE)
    runs-on: windows-latest
    timeout-minutes: 15
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
      
      # Configure MSVC environment as x64
      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Use Windows build script
      - name: Build with Windows script
        run: .\script\build_windows.bat

      - name: Create zip
        run: Compress-Archive -Path ${{github.workspace}}/output/* -Destination gpupixel_windows_x86_64.zip

      - name: Upload Win Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpupixel_windows_x86_64
          path: ./gpupixel_windows_x86_64.zip

  build-android-gradle:
    name: Android (Arm64-v8a)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          cache: gradle

      # Grant script execution permissions
      - name: Grant execute permission for scripts
        run: chmod +x ${{github.workspace}}/script/*.sh
        
      # Use Android build script
      - name: Build with Android script
        run: ${{github.workspace}}/script/build_android.sh

      - name: Create zip
        working-directory: ${{github.workspace}}
        run: | 
          cd src/android/java/gpupixel/build/outputs
          zip -r gpupixel_android.zip aar

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpupixel_android
          path: ${{github.workspace}}/src/android/java/gpupixel/build/outputs/gpupixel_android.zip

  # Deployment job
  deploy:
    needs:
      [
        build-linux-with-docker,
        build-macos-clang,
        build-ios-clang,
        build-windows-cl,
        build-android-gradle,
      ]
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: gpupixel_linux_x86_64
          path: ./

      - name: Download Mac Artifact
        uses: actions/download-artifact@v4
        with:
          name: gpupixel_mac_Universal
          path: ./

      - name: Download iOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: gpupixel_ios_arm64
          path: ./

      - name: Download Win Artifact
        uses: actions/download-artifact@v4
        with:
          name: gpupixel_windows_x86_64
          path: ./
      
      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: gpupixel_android
          path: ./

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: false
          prerelease: false
        
      - name: Upload Linux library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gpupixel_linux_x86_64.zip
          asset_name: gpupixel_linux_x86_64.zip
          asset_content_type: application/gzip

      - name: Upload Mac library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gpupixel_mac_Universal.zip
          asset_name: gpupixel_mac_Universal.zip
          asset_content_type: application/gzip

      - name: Upload iOS library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gpupixel_ios_arm64.zip
          asset_name: gpupixel_ios_arm64.zip
          asset_content_type: application/gzip

      - name: Upload Win library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gpupixel_windows_x86_64.zip
          asset_name: gpupixel_windows_x86_64.zip
          asset_content_type: application/gzip
      
      - name: Upload Android library
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gpupixel_android.zip
          asset_name: gpupixel_android.zip
          asset_content_type: application/gzip